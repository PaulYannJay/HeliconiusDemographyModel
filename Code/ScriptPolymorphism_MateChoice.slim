// set up a simple neutral simulation
initialize() {
	// set the overall mutation rate
	initializeMutationRate(mu);
	// m1 mutation type: neutral
	initializeMutationType("m10", 0, "g", -0.03, 0.2); //mutation sampled among a gamma dsitribution
	initializeMutationType("m11", 0.001, "g", -0.03, 0.2);
	initializeMutationType("m12", 0.01, "g", -0.03, 0.2);
	initializeMutationType("m13", 0.1, "g", -0.03, 0.2);
	initializeMutationType("m14", 0.25, "g", -0.03, 0.2);
	initializeMutationType("m15", 0.5, "g", -0.03, 0.2);
	initializeMutationType("m16", 0.5, "f", 0); //Neutral mutation 
	initializeMutationType("m21", 1.0, "f", 0);// Wing pattern mutation 1 
	initializeMutationType("m22", 1.0, "f", 0);// Wing pattern mutation 2 
	initializeMutationType("m23", 1.0, "f", 0);// Wing pattern mutation 3 
	initializeMutationType("m24", 1.0, "f", 0);// Wing pattern mutation 4 
	initializeMutationType("m25", 1.0, "f", 0);// Wing pattern mutation 5 
	initializeMutationType("m31", 0.0, "f", -0.1);// A deleterious recessive mutation 
	initializeMutationType("m32", 0.0, "f", -0.1);// A deleterious recessive mutation 
	initializeMutationType("m33", 0.0, "f", -0.1);// A deleterious recessive mutation 
	initializeMutationType("m34", 0.0, "f", -0.1);// A deleterious recessive mutation 
	initializeMutationType("m35", 0.0, "f", -0.1);// A deleterious recessive mutation 
	// g1 genomic element type: uses m1 for all mutations 
	initializeGenomicElementType("g1", c(m10,m11,m12,m13,m14,m15, m16),c(1,1,1,1,1,1,16)); //mutation with different dominance appear with different probability
	// uniform chromosome of length 10Mb for two chromosome
	initializeGenomicElement(g1, 0,1999999);
	// uniform recombination along two chromosomes
	rates=c(5e-06);//Two chromosomes with R=r	
    ends=c(1999999); //One chromosome of size 10000000	
	initializeRecombinationRate(rates, ends);
	initializeSex("A");
	//defineConstant("InvArray",matrix(c(1,1,1), nrow=1));
}
// create a population of 500 individuals
1 late(){
	defineConstant("simID", getSeed());
	subpopCount = 10;
	sim.addSubpop("p1", 1000);
	sim.addSubpop("p2", 1000);
	sim.addSubpop("p3", 1000);
	sim.addSubpop("p4", 1000);
	sim.addSubpop("p5", 1000);
	sim.addSubpop("p6", 1000);
	sim.addSubpop("p7", 1000);
	sim.addSubpop("p8", 1000);
	sim.addSubpop("p9", 1000);
	sim.addSubpop("p10", 1000);
	Sample=sample(sim.subpopulations.genomes, 4000);// sample one individual and introduce the inversion and the mutation locus
	Sample.addNewDrawnMutation(m21, 1000000); //Color locus mutation
	Sample.addNewDrawnMutation(m31, 1000001); //Deleterious mutation making the color locus mutation overdominant
	VecMut=sim.subpopulations.genomes.containsMarkerMutation(m21,1000000);//vector of boolean depending on whether genome that contain the inversion
	SubPop=sim.subpopulations.genomes[!VecMut];
	Sample2=sample(SubPop, 4000);
	Sample2.addNewDrawnMutation(m22, 1000000); //
	Sample2.addNewDrawnMutation(m32, 1000001); //
	VecMut=SubPop.containsMarkerMutation(m22,1000000);//vector of boolean depending on whether genome that contain the inversion
	SubPop=SubPop[!VecMut];
	Sample3=sample(SubPop, 4000);
	Sample3.addNewDrawnMutation(m23, 1000000); //
	Sample3.addNewDrawnMutation(m33, 1000001); //
	VecMut=SubPop.containsMarkerMutation(m23,1000000);//vector of boolean depending on whether genome that contain the inversionfor (i in 1:subpopCount)
	SubPop=SubPop[!VecMut];
	Sample4=sample(SubPop, 4000);
	Sample4.addNewDrawnMutation(m24, 1000000); //
	Sample4.addNewDrawnMutation(m34, 1000001); //
	VecMut=SubPop.containsMarkerMutation(m24,1000000);//vector of boolean depending on whether genome that contain the inversionfor (i in 1:subpopCount)
	SubPop=SubPop[!VecMut];
	Sample5=sample(SubPop, 4000);
	Sample5.addNewDrawnMutation(m25, 1000000); //
	Sample5.addNewDrawnMutation(m35, 1000001); //
		
	for (i in 1:subpopCount)
		for (j in 1:subpopCount)
			if (i != j)
				sim.subpopulations[i-1].setMigrationRates(j, m);
	}

1:25000 late(){
	for (g in sim.subpopulations.individuals)
		{
		if (any(g.genomes.containsMarkerMutation(m21,1000000)))
			{g.tag=1;}
		else
			{if(any(g.genomes.containsMarkerMutation(m22,1000000)))
				{g.tag=2;}
			else
				{if(any(g.genomes.containsMarkerMutation(m23,1000000)))
					{g.tag=3;}
				else
					{if(any(g.genomes.containsMarkerMutation(m24,1000000)))
						{g.tag=4;}
					else
						{g.tag=5;}
					}
				}
			}
		}
	}
fitness(NULL,p1) { 
	if(individual.tag==1)
		return 1.0;
	else if(individual.tag==2)
		return 1.0;
	else if(individual.tag==3)
		return 1.0;
	else if(individual.tag==4)
		return LocalAdaptForce;
	else if(individual.tag==5)
		return LocalAdaptForce; 
	}
		
fitness(NULL,p2) { 
	if(individual.tag==1)
		return 1.0;
	else if(individual.tag==2)
		return LocalAdaptForce;
	else if(individual.tag==3)
		return LocalAdaptForce;
	else if(individual.tag==4)
		return 1.0;
	else if(individual.tag==5)
		return LocalAdaptForce; 
	}

fitness(NULL,p3) { 
	if(individual.tag==1)
		return LocalAdaptForce;
	else if(individual.tag==2)
		return LocalAdaptForce;
	else if(individual.tag==3)
		return 1.0;
	else if(individual.tag==4)
		return 1.0;
	else if(individual.tag==5)
		return 1.0;
	}

fitness(NULL,p4) { 
	if(individual.tag==1)
		return LocalAdaptForce;
	else if(individual.tag==2)
		return 1.0;
	else if(individual.tag==3)
		return LocalAdaptForce;
	else if(individual.tag==4)
		return LocalAdaptForce;
	else if(individual.tag==5)
		return 1.0;
	}

fitness(NULL,p5) { 
	if(individual.tag==1)
		return LocalAdaptForce;
	else if(individual.tag==2)
		return LocalAdaptForce;
	else if(individual.tag==3)
		return 1.0;
	else if(individual.tag==4)
		return 1.0;
	else if(individual.tag==5)
		return LocalAdaptForce; 
	}

fitness(NULL,p6) { 
	if(individual.tag==1)
		return 1.0;
	else if(individual.tag==2)
		return LocalAdaptForce; 
	else if(individual.tag==3)
		return LocalAdaptForce; 
	else if(individual.tag==4)
		return 1.0;
	else if(individual.tag==5)
		return 1.0;
	}

fitness(NULL,p7) { 
	if(individual.tag==1)
		return LocalAdaptForce;
	else if(individual.tag==2)
		return LocalAdaptForce;
	else if(individual.tag==3)
		return 1.0;
	else if(individual.tag==4)
		return 1.0;
	else if(individual.tag==5)
		return 1.0;
	}

fitness(NULL,p8) { 
	if(individual.tag==1)
		return 1.0;
	else if(individual.tag==2)
		return LocalAdaptForce;
	else if(individual.tag==3)
		return LocalAdaptForce;
	else if(individual.tag==4)
		return LocalAdaptForce;
	else if(individual.tag==5)
		return 1.0;
	}

fitness(NULL,p9) { 
	if(individual.tag==1)
		return LocalAdaptForce;
	else if(individual.tag==2)
		return 1.0;
	else if(individual.tag==3)
		return LocalAdaptForce;
	else if(individual.tag==4)
		return LocalAdaptForce;
	else if(individual.tag==5)
		return 1.0;
	}
	
fitness(NULL,p10) { 
	if(individual.tag==1)
		return LocalAdaptForce;
	else if(individual.tag==2)
		return 1.0;
	else if(individual.tag==3)
		return 1.0;
	else if(individual.tag==4)
		return 1.0;
	else if(individual.tag==5)
		return LocalAdaptForce; 
	}
		
1: mateChoice() {
Parent2SimilarPheno= (sourceSubpop.individuals.tag == individual.tag);
return weights * ifelse(Parent2SimilarPheno, AssortForce, 1.0);
}

//15000:115000 early() { //introducing inversion regularly
1:25000 early() { 
	if (sim.generation % 10 == 2) //every 30 generation
	//if (sim.generation % 1000 == 0) //every 30 generation
	{
	mut1Pop1=sum(p1.genomes.containsMarkerMutation(m21, 1000000))/2000;
	mut2Pop1=sum(p1.genomes.containsMarkerMutation(m22, 1000000))/2000;
	mut3Pop1=sum(p1.genomes.containsMarkerMutation(m23, 1000000))/2000;
	mut4Pop1=sum(p1.genomes.containsMarkerMutation(m24, 1000000))/2000;
	mut5Pop1=sum(p1.genomes.containsMarkerMutation(m25, 1000000))/2000;
	cat(mut1Pop1 + "\n");
	cat(mut2Pop1 + "\n");
	cat(mut3Pop1 + "\n");
	cat(mut4Pop1 + "\n");
	cat(mut5Pop1 + "\n");
	mut1Pop9=sum(p9.genomes.containsMarkerMutation(m21, 1000000))/2000;
	mut2Pop9=sum(p9.genomes.containsMarkerMutation(m22, 1000000))/2000;
	mut3Pop9=sum(p9.genomes.containsMarkerMutation(m23, 1000000))/2000;
	mut4Pop9=sum(p9.genomes.containsMarkerMutation(m24, 1000000))/2000;
	mut5Pop9=sum(p9.genomes.containsMarkerMutation(m25, 1000000))/2000;
	cat(mut1Pop9 + "\n");
	cat(mut2Pop9 + "\n");
	cat(mut3Pop9 + "\n");
	cat(mut4Pop9 + "\n");
	cat(mut5Pop9 + "\n");
	mut1=sim.mutationsOfType(m21);
	mut2=sim.mutationsOfType(m22);
	mut3=sim.mutationsOfType(m23);
	mut4=sim.mutationsOfType(m24);
	mut5=sim.mutationsOfType(m25);
	Freq1=sum(sim.mutationFrequencies(NULL, mut1));
	Freq2=sum(sim.mutationFrequencies(NULL, mut2));
	Freq3=sum(sim.mutationFrequencies(NULL, mut3));
	Freq4=sum(sim.mutationFrequencies(NULL, mut4));
	Freq5=sum(sim.mutationFrequencies(NULL, mut5));
	cat(sim.generation + "\n");
	catn("Freq1=" + Freq1);
	catn("Freq2=" + Freq2);
	catn("Freq3=" + Freq3);
	catn("Freq4=" + Freq4);
	catn("Freq5=" + Freq5 + "\n");
	}
}

1:25000 late(){
	if (sim.generation % 100 == 1) //output every 100 generation for plottting
		{
		Genomes=p1.genomes; // All genomes
		NMutVec1=c();
		for (g in Genomes) { //For all genome // Far from being optimized...
			NbMut=g.countOfMutationsOfType(m16);
			NMutVec1=c(NMutVec1, NbMut);
			}
		Genomes=p5.genomes; // All genomes
		NMutVec5=c();
		for (g in Genomes) { //For all genome // Far from being optimized...
			NbMut=g.countOfMutationsOfType(m16);
			NMutVec5=c(NMutVec5, NbMut);
			}
		Genomes=p10.genomes; // All genomes
		NMutVec10=c();
		for (g in Genomes) { //For all genome // Far from being optimized...
			NbMut=g.countOfMutationsOfType(m16);
			NMutVec10=c(NMutVec1, NbMut);
			}
		meanNbMut1=mean(NMutVec1);//Mean number of mutation in genomes
		meanNbMut5=mean(NMutVec5);//Mean number of mutation in genomes
		meanNbMut10=mean(NMutVec10);//Mean number of mutation in genomes
		NmutS= sim.countOfMutationsOfType(m16); //number of mutations
		mutS = sim.mutationsOfType(m16);
		FreqS=sim.mutationFrequencies(NULL, mutS); 
		MeanFreqS=mean(FreqS); //Mean frequency of mutations
		PiTotal=0.0;
		PiTotal_S=0.0;
		for (ind in p1.individuals)
			{
			// Calculate the nucleotide heterozygosity of this individual
			muts0 = ind.genomes[0].mutations;
			muts1 = ind.genomes[1].mutations;
			muts0_S = ind.genomes[0].mutationsOfType(m16); //Only neutral mutation
			muts1_S = ind.genomes[1].mutationsOfType(m16);
			// Count the shared mutations
			shared_count = sum(match(muts0, muts1) >= 0);
			shared_count_S = sum(match(muts0_S, muts1_S) >= 0); //Only Neutral mutation
			// All remaining mutations are unshared (i.e. heterozygous)
			unshared_count = muts0.size() + muts1.size() - 2 * shared_count;
			unshared_count_S = muts0_S.size() + muts1_S.size() - 2 * shared_count_S;
			// pi is the mean heterozygosity across the chromosome
			pi_ind = unshared_count / (sim.chromosome.lastPosition + 1);
			pi_ind_S = unshared_count_S / (sim.chromosome.lastPosition + 1);
			PiTotal = PiTotal + pi_ind;
			PiTotal_S = PiTotal_S + pi_ind_S;
		}
		pi = PiTotal / p1.individuals.size();
		pi_S = PiTotal_S / p1.individuals.size();
		line=paste(c(mu,"\t",m,"\t",AssortForce,"\t",LocalAdaptForce,"\t",Rep,"\t",simID,"\t",sim.generation,"\t", meanNbMut1,"\t", meanNbMut5,"\t", meanNbMut10,"\t", NmutS, "\t", MeanFreqS, "\t", pi, "\t", pi_S)); //output the frequency of a given mutation
		writeFile(paste(c("../Output/Polymorphism_MateChoice_Stat.txt"), sep=""), line, append=T);
		}
	}


25000 late(){
//allIndividuals = sim.subpopulations.individuals;
//sampledIndividuals = sample(allIndividuals, 10);// Sample 10 individual
//p1.outputVCFSample(30, filePath=paste(c("Output/m=", m, "_u=", mu, "_ID=", simID, "g120000_30Samp.vcf"), sep=""));//to use a string variable : slim  -d "output='test2.txt'" ScriptNeutralInversionAggregate.slim
sim.outputFull(paste(c("../Output/Polymorphism_MateChoice_", simID,"_g25000_FullPop.txt"), sep=""));
sim.simulationFinished();
}
